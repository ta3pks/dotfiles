# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
snippet useprelude "import prelude" b
use $1::prelude::*;
endsnippet
snippet rtr "routerify router builder" b
Router::builder().build().unwrap()
endsnippet
snippet bpin "Box pin" b
Box::pin(async move{
$0
${1:Ok(${2:()})}
})
endsnippet
snippet -=> "closure" iA
|${3:args}| {
	$0
}
endsnippet

snippet tests "module tests" b
#[cfg(test)]
mod tests {
	use super::*;
	#[test]
	fn test_${1:name}() {
		$0
	}
}
endsnippet

snippet tokio_tests "module tests" b
#[cfg(test)]
mod tests {
	use super::*;
	#[tokio::test]
	async fn test_${1:name}() {
		$0
	}
}
endsnippet


snippet clickhouse_module "impl create table" b
use crate::Db;
use crate::Result;
use clickhouse::Row;
use serde::Deserialize;
use serde::Serialize;

#[derive(Debug, Clone, Serialize, Deserialize, Row)]
#[non_exhaustive]
pub struct $1 {
	$0
}

impl $1 {
	pub(super) async fn create_table(cl: &clickhouse::Client) -> Result<()> {
		cl.query(
			r#"
			CREATE TABLE IF NOT EXISTS $1s (
				$3
			) Engine = ${4:ReplacingMergeTree()}
			Primary Key $5
		"#,
		)
		.execute()
		.await
		.map_err(Into::into)
	}
}
pub struct $1s(pub(crate) Db);
endsnippet

snippet now "now" w
now().unix_secs().cast_as()
endsnippet
snippet datetime "datetime" w
DateTime('Asia/Istanbul'),
endsnippet
snippet derive "derive" w
#[derive(${1:Debug,} ${2:Clone,} ${3:serde::Serialize,} ${4:serde::Deserialize} $0)]
endsnippet
snippet deref "deref" w
#[derive(Educe)]
#[educe(Deref)]
endsnippet
snippet todo "todo comment" b
// TODO: $0
endsnippet
snippet fn "fn" w 
${1:pub} ${2:async} fn ${3:name}(${4:&self${5:,}}) -> ${6:Result<()>} {
	${0:unimplemented!()}
}
endsnippet
snippet serde_case "serde case" b
#[serde(rename = "${1:snake_case}")]
endsnippet
snippet oapi_case "oapi case" b
#[oai(rename_all = "${1:snake_case}")]
endsnippet
snippet moduse "declare a module and immediately pub use its contents" b
mod $1;
pub use $1::*;
endsnippet
snippet fromimpl "implement from trait for a type" b
impl From<$1> for $2 {
	fn from(ty: $1) -> Self {
		$0
	}
}

endsnippet
snippet "\.maperrinto" "map_err into" rA
.map_err(Into${1:::<${2:T}>}::into)$0
endsnippet
snippet componenttt "leptos component" bA
#[component]
pub fn ${1:name}(${2:args}) -> impl IntoView {
	$0
}
endsnippet

snippet fnnn "function" bA
${1:pub} ${2:async} fn ${3:name}(${4:args}) -> ${5:Result<$6>} {
	$0
}
endsnippet

snippet ifff "if else" bA
if ${1:let $2 = }${3:condition} {
	$4
}${5:else if $6 =}${8:condition} {
	$9
}} ${10:else {
	$11
}}
endsnippet
snippet lettt "let" bA
let ${1:var} = ${2:expr};
endsnippet
snippet structtt "struct" bA
${1:#[derive(Debug, Clone, Serialize, Deserialize$2)]}
${3:pub} struct ${4:Name} {
	$0
}
endsnippet
snippet metaaa "meta" bA
#[$1]
endsnippet
snippet vecttt "vec" iA
Vec<${1:T}>$0
endsnippet
snippet opttt "option" iA
Option<${1:T}>$0
endsnippet
snippet resss "result" iA
Result<${1:T}, ${2:E}>$0
endsnippet
